import json
from typing import Type, Union
import requests
import time
from pydantic import BaseModel

from pephubclient.helpers import RequestManager
from pephubclient.pephub_oauth.const import PEPHUB_DEVICE_INIT_URI, PEPHUB_DEVICE_TOKEN_URI
from pephubclient.pephub_oauth.models import InitializeDeviceCodeResponse, PEPHubDeviceTokenResponse
from pephubclient.pephub_oauth.exceptions import PEPHubResponseException, PEPHubTokenExchangeException



class PEPHubAuth(RequestManager):
    """
    Class responsible for authorization to PEPhub.
    """

    def login_to_pephub(self):
        pephub_response = self._request_pephub_for_device_code()
        print(f"User verification code: {pephub_response.device_code}, please go to the website: "
              f"{pephub_response.auth_url} to authenticate.")

        time.sleep(2)

        while True:
            try:
                user_token = self._exchange_device_code_on_token(pephub_response.device_code)
            except PEPHubTokenExchangeException:
                time.sleep(2)
            else:
                return user_token


    def _request_pephub_for_device_code(self) -> InitializeDeviceCodeResponse:
        """
        Requests device code from pephub
        """
        response = PEPHubAuth.send_request(
            method="POST",
            url=PEPHUB_DEVICE_INIT_URI,
            params=None,
            headers=None,
        )
        return self._handle_pephub_response(
            response, InitializeDeviceCodeResponse
        )
        # return "device code"

    def _exchange_device_code_on_token(self, device_code: str) -> str:
        """
        Send request with device dode to pephub in order to exchange it on JWT
        :param device_code: device code that was generated by pephub
        """
        response = PEPHubAuth.send_request(
            method="POST",
            url=PEPHUB_DEVICE_TOKEN_URI,
            params=None,
            headers={"device-code": device_code},
        )
        pephub_token_response = self._handle_pephub_response(
            response, PEPHubDeviceTokenResponse
        )
        return pephub_token_response.jwt_token

    @staticmethod
    def _handle_pephub_response(
            response: requests.Response,
            model: Type[BaseModel]
    ) -> Union[BaseModel, InitializeDeviceCodeResponse, PEPHubDeviceTokenResponse]:
        """
        Decode the response from GitHub and pack the returned data into appropriate model.

        Args:
            response: Response from GitHub.
            model: Model that the data will be packed to.

        Returns:
            Response data as an instance of correct model.
        """
        if response.status_code == 401:
            raise PEPHubTokenExchangeException
        if response.status_code != 200:
            raise PEPHubResponseException
        try:
            content = json.loads(PEPHubAuth.decode_response(response))
        except json.JSONDecodeError:
            raise Exception("Something went wrong with GitHub response")

        try:
            return model(**content)
        except Exception:
            raise Exception()






